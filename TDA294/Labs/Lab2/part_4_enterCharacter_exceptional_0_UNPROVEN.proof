\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 29 15:36:11 CET 2018
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Mon Oct 29 15:36:11 CET 2018
name=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML exceptional_behavior operation contract.0
contract=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML exceptional_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "allden" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "11927")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,1,0,1,0,0,1,1") (newnames "input,self,exc,heapAtPre,o,f"))
(rule "boolean_equal" (formula "1") (term "0,1,0,1,0,0,1,1"))
(rule "inInt" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "concrete_impl_1" (formula "1") (term "1,0,1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "8") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_0") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "3"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "9"))
(rule "false_to_not_true" (formula "1") (term "0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1"))
(rule "polySimp_rightDist" (formula "6") (term "1"))
(rule "mul_literals" (formula "6") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
(rule "polySimp_elimOne" (formula "6") (term "1,1"))
(rule "boxToDiamond" (formula "1") (term "1"))
(rule "double_not" (formula "1") (term "0,0,1"))
(rule "notLeft" (formula "1"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_enterCharacter,savedHeapBefore_enterCharacter"))
(rule "simplifyUpdate2" (formula "10") (term "1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_isSingleDigit,savedHeapBefore_isSingleDigit"))
(rule "simplifyUpdate2" (formula "7") (term "1"))
(rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x_2"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_2"))
(rule "compound_assignment_3_nonsimple" (formula "7") (term "1"))
(rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
(rule "compound_assignment_2" (formula "10") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
(rule "ifElseUnfold" (formula "7") (term "1") (inst "#boolv=x_3"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
(rule "compound_assignment_2" (formula "7") (term "1") (inst "#v=x_4"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
(rule "greater_equal_than_comparison_simple" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
(rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
(rule "compound_assignment_1_new" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "7") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "7") (term "0,0,0,1,0"))
(rule "ifthenelse_concrete3" (formula "7") (term "0,0,1,0"))
(rule "boolean_not_equal_2" (formula "7") (term "1,0,0,1,0"))
(rule "concrete_or_4" (formula "7") (term "0,0,1,0"))
(rule "ifElseSplit" (formula "7"))
(branch "if x_3 true"
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "ifthenelse_concrete4" (formula "1"))
   (rule "boolean_not_equal_2" (formula "1") (term "1"))
   (rule "concrete_or_4" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "7"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "assignment" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "emptyModality" (formula "8") (term "1"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "applyOnPV" (formula "8") (term "0"))
   (rule "simplifyUpdate1" (formula "8") (term "1"))
   (rule "boolean_not_equal_2" (formula "8"))
   (rule "false_right" (formula "8"))
   (rule "arrayLengthIsAShort" (formula "6") (term "1,1"))
   (rule "inShort" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "1,1"))
   (rule "methodCallWithAssignmentWithinClass" (formula "11") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_12"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "input_2"))
   (rule "assignment" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_isSingleDigit_1,savedHeapBefore_isSingleDigit_1"))
   (rule "simplifyUpdate2" (formula "11") (term "1"))
   (rule "returnUnfold" (formula "11") (term "1") (inst "#v0=x_13"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_13"))
   (rule "compound_assignment_3_nonsimple" (formula "11") (term "1"))
   (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_14"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_14"))
   (rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_15"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_15"))
   (rule "greater_equal_than_comparison_simple" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "inEqSimp_contradInEq0" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "11") (term "0,0,0,1,0"))
   (rule "concrete_and_2" (formula "11") (term "0,0,1,0"))
   (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
   (rule "compound_assignment_1_new" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "boolean_not_equal_2" (formula "11") (term "0,0,1,0"))
   (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1") (ifseqformula "2"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x_14 true"
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "boolean_equal" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "methodCallReturn" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnPV" (formula "12") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnPV" (formula "12") (term "0,1,0"))
      (rule "compound_assignment_1_new" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
      (rule "boolean_not_equal_2" (formula "12") (term "0,0,1,0"))
      (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if x true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_16"))
         (rule "compound_inequality_comparison_1" (formula "12") (term "1") (inst "#v0=t"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "t_2"))
         (rule "assignment_read_attribute_this" (formula "12"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "inequality_comparison_simple" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
         (rule "ifSplit" (formula "12"))
         (branch "if x_16 true"
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "eval_order_access1" (formula "13") (term "1") (inst "#v0=t"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "t_3"))
            (rule "assignment_read_attribute_this" (formula "13"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "assignment_write_attribute" (formula "13"))
            (branch "Normal Execution (t_3 != null)"
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnElementary" (formula "13") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "3,0,1,0"))
               (rule "blockEmpty" (formula "13") (term "1"))
               (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=i"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_12"))
               (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_13"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_13"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0,1,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "11"))
               (rule "concrete_or_2" (formula "1"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=i_14"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_14"))
               (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createObject>_2,savedHeapBefore_<createObject>_2"))
               (rule "simplifyUpdate2" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "__NEW___3"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=i_15"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_15"))
               (rule "allocateInstance" (formula "14"))
               (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "1") (term "0"))
               (rule "applyOnPV" (formula "1") (term "0,0"))
               (rule "wellFormedStorePrimitive" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
               (rule "concrete_impl_1" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "12"))
               (rule "simplifyUpdate1" (formula "12") (term "1"))
               (rule "applyOnRigidTerm" (formula "12") (term "0"))
               (rule "applyOnPV" (formula "12") (term "0,0"))
               (rule "simplifyUpdate1" (formula "12") (term "2,0"))
               (rule "simplifyUpdate1" (formula "12") (term "1,0"))
               (rule "dismissNonSelectedField" (formula "12") (term "0"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<create>_2,savedHeapBefore_<create>_2"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "methodCallWithinClass" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepareEnter>_2,savedHeapBefore_<prepareEnter>_2"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_11,savedHeapBefore_<prepare>_11"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_12,savedHeapBefore_<prepare>_12"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_13,savedHeapBefore_<prepare>_13"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_14,savedHeapBefore_<prepare>_14"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "17") (term "1"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnPV" (formula "17") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnPV" (formula "17") (term "0,1,0"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_14,savedHeapBefore_<init>_14"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_15,savedHeapBefore_<init>_15"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_16,savedHeapBefore_<init>_16"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_17,savedHeapBefore_<init>_17"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_18,savedHeapBefore_<init>_18"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute" (formula "17"))
               (branch "Normal Execution (i_13 != null)"
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,1,0"))
                  (rule "methodCallThrow" (formula "17") (term "1"))
                  (rule "tryCatchThrow" (formula "17") (term "1"))
                  (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_18"))
                  (rule "equality_comparison_simple" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
                  (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                  (rule "ifElseSplit" (formula "17"))
                  (branch "if x_18 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "18"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_18 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "18"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "boolean_not_equal_2" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "ifElseSplit" (formula "17"))
                     (branch "if i_12 instanceof java.lang.Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "e_3"))
                        (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                        (branch "Normal Execution (i_12 instanceof java.lang.Throwable)"
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "assignment" (formula "17") (term "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "emptyModality" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17") (term "0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0"))
                           (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "17") (term "0,0"))
                           (rule "concrete_and_1" (formula "17") (term "0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                           (rule "instanceof_static_type" (formula "17") (term "0,1,0"))
                           (rule "boolean_equal" (formula "17") (term "1,0"))
                           (rule "concrete_and_3" (formula "17") (term "0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0,1"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "0,0,0,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0,0"))
                           (rule "instanceof_static_type" (formula "17") (term "0,0,0,0"))
                           (rule "boolean_equal" (formula "17") (term "0,0,0"))
                           (rule "concrete_impl_1" (formula "17") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "1,0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,1,0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0,0,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0,0,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,0,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,0,1,1,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "1,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,1,0,1,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "pullOutSelect" (formula "17") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_textBoxRenderer_3"))
                           (rule "applyEq" (formula "18") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "18") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "18") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "17") (term "0,0,0,0") (ifseqformula "14"))
                           (rule "concrete_not_2" (formula "17") (term "0,0,0"))
                           (rule "concrete_impl_1" (formula "17") (term "0,0"))
                           (rule "pullOutSelect" (formula "17") (term "0,0,0") (inst "selectSK=TextBoxRenderer_showError_1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "eqClose" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                           (rule "eqClose" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "0,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_true" (formula "1") (term "0"))
                           (rule "castDel" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "18") (term "0,0,0") (ifseqformula "1"))
                           (rule "boolean_equal" (formula "18") (term "0,0"))
                           (rule "concrete_and_1" (formula "18") (term "0"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "Class_invariant_axiom_for_NumericTextBox" (formula "11") (inst "j=j") (inst "i=i_16") (ifseqformula "6"))
                           (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                           (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                           (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                           (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
                           (rule "concrete_or_2" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                           (rule "times_zero_1" (formula "11") (term "0,0"))
                           (rule "add_zero_left" (formula "11") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_NumericTextBox" (formula "19") (term "0") (inst "j=j") (inst "i=i_16") (ifseqformula "6"))
                           (rule "inInt" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "concrete_and_3" (formula "19") (term "0,0,0,1,1,0"))
                           (rule "inInt" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "concrete_and_3" (formula "19") (term "0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "pullOutSelect" (formula "19") (term "0,1,1,0,0") (inst "selectSK=NumericTextBox_cursorPosition_3"))
                           (rule "applyEq" (formula "20") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "0,1,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_left" (formula "19") (term "1,1,0,0") (ifseqformula "11"))
                           (rule "concrete_and_3" (formula "19") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "19") (term "1,1,1,0,0,1,1,0") (inst "selectSK=NumericTextBox_EMPTY_3"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "19") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_content_3"))
                           (rule "applyEq" (formula "20") (term "0,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "19") (term "0,1,0"))
                           (rule "concrete_and_1" (formula "19") (term "1,0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "19") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "19") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "19") (term "0,0"))
                           (rule "inEqSimp_subsumption0" (formula "19") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "19") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "19") (term "0,0"))
                           (rule "concrete_and_1" (formula "19") (term "0"))
                           (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0,0"))
                           (rule "commute_and" (formula "12") (term "0,1,0,0"))
                           (rule "andRight" (formula "19"))
                           (branch "Case 1"
                              (rule "allRight" (formula "19") (inst "sk=j_3"))
                              (rule "allRight" (formula "19") (inst "sk=i_16_0"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=arr_6"))
                              (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "24") (term "0,1") (inst "selectSK=arr_7"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
                              (rule "times_zero_1" (formula "16") (term "0,0"))
                              (rule "add_zero_left" (formula "16") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                              (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                              (rule "mul_literals" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                              (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                              (rule "mul_literals" (formula "3") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "cnf_rightDist" (formula "19") (term "0,0"))
                              (rule "distr_forallAnd" (formula "19") (term "0"))
                              (rule "distr_forallAnd" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "commute_and" (formula "27") (term "0"))
                              (rule "commute_or" (formula "20") (term "0,0"))
                              (rule "cnf_rightDist" (formula "19") (term "0,0"))
                              (rule "distr_forallAnd" (formula "19") (term "0"))
                              (rule "distr_forallAnd" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0"))
                              (rule "commute_or" (formula "20") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0,0,0"))
                              (rule "cut_direct" (formula "28") (term "0,0"))
                              (branch "CUT: self.content[i_16_0] >= 0 TRUE"
                                 (rule "concrete_and_1" (formula "29") (term "0"))
                                 (rule "cut_direct" (formula "29") (term "0"))
                                 (branch "CUT: self.content[i_16_0] <= 9 TRUE"
                                    (rule "concrete_and_1" (formula "30"))
                                    (opengoal " ")
                                 )
                                 (branch "CUT: self.content[i_16_0] <= 9 FALSE"
                                    (rule "concrete_and_2" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "inEqSimp_leqRight" (formula "29"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.content[i_16_0] >= 0 FALSE"
                                 (rule "concrete_and_2" (formula "29") (term "0"))
                                 (rule "concrete_and_2" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (opengoal " ")
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "19") (inst "sk=f_3"))
                              (rule "allRight" (formula "19") (inst "sk=o_3"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_3_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "22"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_3"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_3_4"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "commute_and" (formula "23"))
                              (rule "cnf_rightDist" (formula "16") (term "0,0"))
                              (rule "distr_forallAnd" (formula "16") (term "0"))
                              (rule "distr_forallAnd" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "commute_and" (formula "4") (term "0,0"))
                              (rule "commute_or" (formula "17") (term "0,0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "commute_and" (formula "2") (term "0,0"))
                              (rule "commute_and" (formula "1") (term "0,0"))
                              (rule "cnf_rightDist" (formula "16") (term "0,0"))
                              (rule "distr_forallAnd" (formula "16") (term "0"))
                              (rule "distr_forallAnd" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0"))
                              (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_3 = java.lang.Object::<created> & o_3 = i_15 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "2"))
                                 (rule "applyEqRigid" (formula "23") (term "0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "23") (term "0"))
                                 (rule "concrete_and_2" (formula "23"))
                                 (rule "false_right" (formula "23"))
                                 (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "19"))
                                 (rule "concrete_not_2" (formula "23") (term "0"))
                                 (rule "concrete_and_1" (formula "23"))
                                 (rule "notRight" (formula "23"))
                                 (rule "applyEq" (formula "24") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "19") (ifseqformula "1"))
                              )
                              (branch "f_3 = java.lang.Object::<created> & o_3 = i_15 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "cut_direct" (formula "26") (term "0,0"))
                                 (branch "CUT: o_3 = null TRUE"
                                    (rule "concrete_not_1" (formula "27") (term "0"))
                                    (rule "concrete_and_2" (formula "27"))
                                    (rule "false_right" (formula "27"))
                                    (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "26") (term "1"))
                                    (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "23"))
                                    (rule "concrete_and_4" (formula "26"))
                                    (rule "false_right" (formula "26"))
                                    (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "4") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "22"))
                                    (rule "concrete_and_4" (formula "4") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "18") (term "1"))
                                    (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "21"))
                                    (rule "concrete_and_4" (formula "18"))
                                    (rule "false_right" (formula "18"))
                                    (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "3") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "20"))
                                    (rule "concrete_and_4" (formula "3") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "2") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "close" (formula "23") (ifseqformula "2"))
                                 )
                                 (branch "CUT: o_3 = null FALSE"
                                    (rule "concrete_not_2" (formula "27") (term "0"))
                                    (rule "concrete_and_1" (formula "27"))
                                    (rule "notRight" (formula "27"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_3 = java.lang.Throwable::$cause & o_3 = i_15 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "19"))
                                       (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "7"))
                                       (rule "applyEqRigid" (formula "24") (term "0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "24") (term "0"))
                                       (rule "concrete_and_2" (formula "24"))
                                       (rule "false_right" (formula "24"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "19") (ifseqformula "1"))
                                    )
                                    (branch "f_3 = java.lang.Throwable::$cause & o_3 = i_15 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_3 = java.lang.Throwable::$message & o_3 = i_15 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "4") (term "0,0"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "19"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "20"))
                                          (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "20"))
                                          (rule "false_right" (formula "20"))
                                          (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "27") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "27") (term "0") (ifseqformula "8"))
                                          (rule "eqSymm" (formula "27"))
                                          (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "25") (term "0"))
                                          (rule "concrete_and_2" (formula "25"))
                                          (rule "false_right" (formula "25"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "4") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "4") (term "0"))
                                          (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "25"))
                                          (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "19") (ifseqformula "1"))
                                       )
                                       (branch "f_3 = java.lang.Throwable::$message & o_3 = i_15 FALSE"
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "f_3 = java.lang.Object::<initialized> & o_3 = i_15 TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "18"))
                                             (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "20"))
                                             (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "19"))
                                             (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                             (rule "close" (formula "20") (ifseqformula "1"))
                                          )
                                          (branch "f_3 = java.lang.Object::<initialized> & o_3 = i_15 FALSE"
                                             (rule "close" (formula "29") (ifseqformula "2"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "ClassCastException (!(i_12 instanceof java.lang.Throwable))"
                           (rule "instanceof_static_type" (formula "17") (term "0,1,1"))
                           (rule "boolean_equal" (formula "17") (term "1,1"))
                           (rule "concrete_or_3" (formula "17") (term "1"))
                           (rule "closeTrue" (formula "17"))
                        )
                     )
                     (branch "if i_12 instanceof java.lang.Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                        (rule "double_not" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "close" (formula "14") (ifseqformula "1"))
                     )
                  )
               )
               (branch "Null Reference (i_13 = null)"
                  (rule "false_right" (formula "18"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "14") (ifseqformula "1"))
               )
            )
            (branch "Null Reference (t_3 = null)"
               (rule "false_right" (formula "14"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "close" (formula "11") (ifseqformula "1"))
            )
         )
         (branch "if x_16 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "applyOnPV" (formula "10") (term "0"))
            (rule "simplifyUpdate1" (formula "10") (term "1"))
            (rule "ifthenelse_concrete4" (formula "10"))
            (rule "boolean_not_equal_2" (formula "10") (term "1"))
            (rule "concrete_or_4" (formula "10"))
            (rule "notRight" (formula "10"))
            (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=i"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_8"))
            (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_9"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_9"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "3"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_10"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_10"))
            (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<createObject>_1,savedHeapBefore_<createObject>_1"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "__NEW___2"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_11"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_11"))
            (rule "allocateInstance" (formula "13"))
            (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
            (rule "concrete_impl_1" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<create>_1,savedHeapBefore_<create>_1"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "methodCallWithinClass" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepareEnter>_1,savedHeapBefore_<prepareEnter>_1"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_7,savedHeapBefore_<prepare>_7"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_8,savedHeapBefore_<prepare>_8"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_9,savedHeapBefore_<prepare>_9"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_10,savedHeapBefore_<prepare>_10"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "16") (term "1"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnPV" (formula "16") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnPV" (formula "16") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_9,savedHeapBefore_<init>_9"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_10,savedHeapBefore_<init>_10"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_11,savedHeapBefore_<init>_11"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_12,savedHeapBefore_<init>_12"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_13,savedHeapBefore_<init>_13"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute" (formula "16"))
            (branch "Normal Execution (i_9 != null)"
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
               (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
               (rule "assignment" (formula "16") (term "1"))
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnPV" (formula "16") (term "0,1,0"))
               (rule "methodCallThrow" (formula "16") (term "1"))
               (rule "tryCatchThrow" (formula "16") (term "1"))
               (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_17"))
               (rule "equality_comparison_simple" (formula "16") (term "1"))
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
               (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
               (rule "replace_known_right" (formula "16") (term "0,0,1,0") (ifseqformula "13"))
               (rule "ifthenelse_false" (formula "16") (term "0,1,0"))
               (rule "ifElseSplit" (formula "16"))
               (branch "if x_17 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_17 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "applyOnPV" (formula "12") (term "0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "boolean_not_equal_2" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "ifElseSplit" (formula "16"))
                  (branch "if i_8 instanceof java.lang.Throwable true"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_2"))
                     (rule "delete_unnecessary_cast" (formula "16") (term "1"))
                     (branch "Normal Execution (i_8 instanceof java.lang.Throwable)"
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                        (rule "applyOnElementary" (formula "16") (term "1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0"))
                        (rule "assignment" (formula "16") (term "1"))
                        (rule "sequentialToParallel2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                        (rule "applyOnElementary" (formula "16") (term "1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0"))
                        (rule "emptyModality" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,1,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
                        (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "16") (term "0,0"))
                        (rule "concrete_and_1" (formula "16") (term "0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
                        (rule "instanceof_static_type" (formula "16") (term "0,1,0"))
                        (rule "boolean_equal" (formula "16") (term "1,0"))
                        (rule "concrete_and_3" (formula "16") (term "0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,1,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,1,0,0,1"))
                        (rule "eqSymm" (formula "16") (term "1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,1,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0,0"))
                        (rule "instanceof_static_type" (formula "16") (term "0,0,0,0"))
                        (rule "boolean_equal" (formula "16") (term "0,0,0"))
                        (rule "concrete_impl_1" (formula "16") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,1,1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,1,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,0,0,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,1,1,0,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,0,0,0,1"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "applyEq" (formula "16") (term "1,0,0,0,0,0,1") (ifseqformula "2"))
                        (rule "pullOutSelect" (formula "16") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_textBoxRenderer_2"))
                        (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "17") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "16") (term "0,0,0"))
                        (rule "concrete_impl_2" (formula "16") (term "0,0"))
                        (rule "concrete_and_1" (formula "16") (term "0"))
                        (rule "Class_invariant_axiom_for_NumericTextBox" (formula "11") (inst "j=j") (inst "i=i_12") (ifseqformula "6"))
                        (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                        (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
                        (rule "concrete_or_2" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                        (rule "times_zero_1" (formula "11") (term "0,0"))
                        (rule "add_zero_left" (formula "11") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "nnf_imp2or" (formula "12") (term "0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                        (rule "Class_invariant_axiom_for_NumericTextBox" (formula "18") (term "0") (inst "j=j") (inst "i=i_12") (ifseqformula "6"))
                        (rule "inInt" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "concrete_and_3" (formula "18") (term "0,0,0,1,1,0"))
                        (rule "inInt" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "concrete_and_3" (formula "18") (term "0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1,0,0,1,1,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "pullOutSelect" (formula "18") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_content_2"))
                        (rule "applyEq" (formula "19") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "18") (term "0,1,0"))
                        (rule "concrete_and_1" (formula "18") (term "1,0"))
                        (rule "replace_known_right" (formula "18") (term "0,0,0,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "18") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "18") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "18") (term "1,1,1,0,0,1,0") (inst "selectSK=NumericTextBox_EMPTY_2"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "18") (term "1,1,0,0,0,0,1,0") (inst "selectSK=NumericTextBox_cursorPosition_2"))
                        (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "11"))
                        (rule "concrete_and_3" (formula "18") (term "0,0"))
                        (rule "inEqSimp_subsumption0" (formula "18") (term "0,0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "18") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "18") (term "0,0"))
                        (rule "concrete_and_1" (formula "18") (term "0"))
                        (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,0"))
                        (rule "commute_and" (formula "12") (term "0,1,0,0"))
                        (rule "andRight" (formula "18"))
                        (branch "Case 1"
                           (rule "allRight" (formula "18") (inst "sk=j_2"))
                           (rule "allRight" (formula "18") (inst "sk=i_12_0"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "inEqSimp_geqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "23") (term "0,0,0") (inst "selectSK=arr_4"))
                           (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "23") (term "0,1") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "24") (term "0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
                           (rule "mul_literals" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "cnf_rightDist" (formula "19") (term "0,0"))
                           (rule "distr_forallAnd" (formula "19") (term "0"))
                           (rule "distr_forallAnd" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "commute_and" (formula "26") (term "0"))
                           (rule "commute_or" (formula "20") (term "0,0"))
                           (rule "cnf_rightDist" (formula "19") (term "0,0"))
                           (rule "distr_forallAnd" (formula "19") (term "0"))
                           (rule "distr_forallAnd" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "commute_or_2" (formula "19") (term "0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0"))
                           (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                           (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "20") (term "0,0,0"))
                           (rule "commute_or_2" (formula "20") (term "0,0"))
                           (rule "cut_direct" (formula "27") (term "0,0"))
                           (branch "CUT: self.content[i_12_0] >= 0 TRUE"
                              (rule "concrete_and_1" (formula "28") (term "0"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: self.content[i_12_0] <= 9 TRUE"
                                 (rule "concrete_and_1" (formula "29"))
                                 (opengoal " ")
                              )
                              (branch "CUT: self.content[i_12_0] <= 9 FALSE"
                                 (rule "concrete_and_2" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                 (rule "concrete_or_1" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (opengoal " ")
                              )
                           )
                           (branch "CUT: self.content[i_12_0] >= 0 FALSE"
                              (rule "concrete_and_2" (formula "28") (term "0"))
                              (rule "concrete_and_2" (formula "28"))
                              (rule "false_right" (formula "28"))
                              (rule "inEqSimp_geqRight" (formula "27"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (opengoal " ")
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "18") (inst "sk=f_2"))
                           (rule "allRight" (formula "18") (inst "sk=o_2"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_2_0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_2"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_2_3"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "19"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "commute_and" (formula "22"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0"))
                           (rule "distr_forallAnd" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or" (formula "17") (term "0,0"))
                           (rule "commute_and" (formula "4") (term "0,0"))
                           (rule "commute_and" (formula "3") (term "0,0"))
                           (rule "commute_and" (formula "2") (term "0,0"))
                           (rule "commute_and" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0"))
                           (rule "distr_forallAnd" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or_2" (formula "16") (term "0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0"))
                           (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_2 = java.lang.Object::<created> & o_2 = i_11 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "applyEqRigid" (formula "25") (term "0,0") (ifseqformula "1"))
                              (rule "equalUnique" (formula "25") (term "0"))
                              (rule "concrete_and_2" (formula "25"))
                              (rule "false_right" (formula "25"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "26") (term "2,0") (ifseqformula "1"))
                              (rule "narrowSelectType" (formula "26") (term "0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "22"))
                              (rule "concrete_not_2" (formula "25") (term "0"))
                              (rule "concrete_and_1" (formula "25"))
                              (rule "notRight" (formula "25"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                              (rule "equalUnique" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "eqSymm" (formula "23"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "19") (ifseqformula "1"))
                           )
                           (branch "f_2 = java.lang.Object::<created> & o_2 = i_11 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "25") (term "0,0"))
                              (branch "CUT: o_2 = null TRUE"
                                 (rule "concrete_not_1" (formula "26") (term "0"))
                                 (rule "concrete_and_2" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "1"))
                                 (rule "concrete_and_3" (formula "25"))
                                 (rule "applyEqRigid" (formula "26") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "3") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "22"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEqRigid" (formula "18") (term "0,1") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "18") (term "1"))
                                 (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "21"))
                                 (rule "concrete_and_4" (formula "18"))
                                 (rule "false_right" (formula "18"))
                                 (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "2") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "2") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
                                 (rule "eqClose" (formula "22"))
                                 (rule "closeTrue" (formula "22"))
                              )
                              (branch "CUT: o_2 = null FALSE"
                                 (rule "concrete_not_2" (formula "26") (term "0"))
                                 (rule "concrete_and_1" (formula "26"))
                                 (rule "notRight" (formula "26"))
                                 (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "26"))
                                 (rule "concrete_and_4" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "f_2 = java.lang.Throwable::$cause & o_2 = i_11 TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                    (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                    (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "19"))
                                    (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                    (rule "equalUnique" (formula "4") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                    (rule "equalUnique" (formula "18"))
                                    (rule "false_right" (formula "18"))
                                    (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "close" (formula "19") (ifseqformula "1"))
                                 )
                                 (branch "f_2 = java.lang.Throwable::$cause & o_2 = i_11 FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_2 = java.lang.Throwable::$message & o_2 = i_11 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "20"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "19"))
                                       (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "19") (ifseqformula "1"))
                                    )
                                    (branch "f_2 = java.lang.Throwable::$message & o_2 = i_11 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_2 = java.lang.Object::<initialized> & o_2 = i_11 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "19"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "20"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "18"))
                                          (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "20"))
                                          (rule "false_right" (formula "20"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "19") (ifseqformula "1"))
                                       )
                                       (branch "f_2 = java.lang.Object::<initialized> & o_2 = i_11 FALSE"
                                          (rule "close" (formula "27") (ifseqformula "2"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "ClassCastException (!(i_8 instanceof java.lang.Throwable))"
                        (rule "instanceof_static_type" (formula "16") (term "0,1,1"))
                        (rule "boolean_equal" (formula "16") (term "1,1"))
                        (rule "concrete_or_3" (formula "16") (term "1"))
                        (rule "closeTrue" (formula "16"))
                     )
                  )
                  (branch "if i_8 instanceof java.lang.Throwable false"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                     (rule "concrete_or_4" (formula "1") (term "0,1"))
                     (rule "double_not" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "close" (formula "14") (ifseqformula "1"))
                  )
               )
            )
            (branch "Null Reference (i_9 = null)"
               (rule "false_right" (formula "17"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "14") (ifseqformula "1"))
            )
         )
      )
      (branch "if x false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "10"))
         (rule "applyOnPV" (formula "10") (term "0"))
         (rule "simplifyUpdate1" (formula "10") (term "1"))
         (rule "boolean_equal" (formula "10"))
         (rule "closeTrue" (formula "10"))
      )
   )
   (branch "if x_14 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "applyOnPV" (formula "10") (term "0"))
      (rule "simplifyUpdate1" (formula "10") (term "1"))
      (rule "boolean_equal" (formula "10"))
      (rule "closeTrue" (formula "10"))
   )
)
(branch "if x_3 false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "applyOnPV" (formula "7") (term "0"))
   (rule "simplifyUpdate1" (formula "7") (term "1"))
   (rule "ifthenelse_concrete4" (formula "7"))
   (rule "boolean_not_equal_2" (formula "7") (term "1"))
   (rule "concrete_or_4" (formula "7"))
   (rule "notRight" (formula "7"))
   (rule "less_equal_than_comparison_simple" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
   (rule "blockEmpty" (formula "8") (term "1"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "emptyModality" (formula "8") (term "1"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "applyOnPV" (formula "8") (term "0"))
   (rule "simplifyUpdate1" (formula "8") (term "1"))
   (rule "ifthenelse_concrete3" (formula "8"))
   (rule "boolean_not_equal_2" (formula "8") (term "1"))
   (rule "concrete_or_4" (formula "8"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
   (rule "leq_literals" (formula "2") (term "0"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "arrayLengthNotNegative" (formula "6") (term "1,1"))
   (rule "arrayLengthIsAShort" (formula "7") (term "1,1"))
   (rule "inShort" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "methodCallWithAssignmentWithinClass" (formula "11") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "input_1"))
   (rule "assignment" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_isSingleDigit_0,savedHeapBefore_isSingleDigit_0"))
   (rule "simplifyUpdate2" (formula "11") (term "1"))
   (rule "returnUnfold" (formula "11") (term "1") (inst "#v0=x_6"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_6"))
   (rule "compound_assignment_3_nonsimple" (formula "11") (term "1"))
   (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_7"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_7"))
   (rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_8"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_8"))
   (rule "greater_equal_than_comparison_simple" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "inEqSimp_subsumption1" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
   (rule "leq_literals" (formula "11") (term "0,0,0,1,0"))
   (rule "concrete_or_1" (formula "11") (term "0,0,1,0"))
   (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
   (rule "compound_assignment_1_new" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate3" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
   (rule "boolean_equal" (formula "11") (term "0,0,1,0"))
   (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,1,1") (ifseqformula "2"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x_7 true"
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "boolean_not_equal_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_7 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "applyOnPV" (formula "10") (term "0"))
      (rule "simplifyUpdate1" (formula "10") (term "1"))
      (rule "boolean_not_equal_2" (formula "10"))
      (rule "false_right" (formula "10"))
      (rule "less_equal_than_comparison_simple" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "12") (term "0,0,0,1,0"))
      (rule "concrete_and_2" (formula "12") (term "0,0,1,0"))
      (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
      (rule "methodCallReturn" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnPV" (formula "12") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "blockEmpty" (formula "12") (term "1"))
      (rule "assignment" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnPV" (formula "12") (term "0,1,0"))
      (rule "compound_assignment_1_new" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "simplifyUpdate2" (formula "12"))
      (rule "simplifyUpdate3" (formula "12") (term "1,0"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
      (rule "boolean_not_equal_2" (formula "12") (term "0,0,1,0"))
      (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if x true"
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_9"))
         (rule "compound_inequality_comparison_1" (formula "12") (term "1") (inst "#v0=t"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "t"))
         (rule "assignment_read_attribute_this" (formula "12"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "inequality_comparison_simple" (formula "12") (term "1"))
         (rule "sequentialToParallel2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate3" (formula "12") (term "1,0"))
         (rule "applyOnElementary" (formula "12") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
         (rule "ifSplit" (formula "12"))
         (branch "if x_9 true"
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "eval_order_access1" (formula "13") (term "1") (inst "#v0=t"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "t_1"))
            (rule "assignment_read_attribute_this" (formula "13"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "assignment_write_attribute" (formula "13"))
            (branch "Normal Execution (t_1 != null)"
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnElementary" (formula "13") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "3,0,1,0"))
               (rule "blockEmpty" (formula "13") (term "1"))
               (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=i"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_4"))
               (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_5"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_5"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0,1,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "11"))
               (rule "concrete_or_2" (formula "1"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=i_6"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_6"))
               (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createObject>_0,savedHeapBefore_<createObject>_0"))
               (rule "simplifyUpdate2" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "__NEW___1"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=i_7"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_7"))
               (rule "allocateInstance" (formula "14"))
               (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "1") (term "0"))
               (rule "applyOnPV" (formula "1") (term "0,0"))
               (rule "wellFormedStorePrimitive" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
               (rule "concrete_impl_1" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "12"))
               (rule "simplifyUpdate1" (formula "12") (term "1"))
               (rule "applyOnRigidTerm" (formula "12") (term "0"))
               (rule "applyOnPV" (formula "12") (term "0,0"))
               (rule "simplifyUpdate1" (formula "12") (term "2,0"))
               (rule "simplifyUpdate1" (formula "12") (term "1,0"))
               (rule "dismissNonSelectedField" (formula "12") (term "0"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<create>_0,savedHeapBefore_<create>_0"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "methodCallWithinClass" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepareEnter>_0,savedHeapBefore_<prepareEnter>_0"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_4,savedHeapBefore_<prepare>_4"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_5,savedHeapBefore_<prepare>_5"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_6,savedHeapBefore_<prepare>_6"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "17") (term "1"))
               (rule "methodCallReturn" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnPV" (formula "17") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment" (formula "17") (term "1"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnPV" (formula "17") (term "0,1,0"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_5,savedHeapBefore_<init>_5"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_6,savedHeapBefore_<init>_6"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_7,savedHeapBefore_<init>_7"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallSuper" (formula "17") (term "1"))
               (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_8,savedHeapBefore_<init>_8"))
               (rule "simplifyUpdate2" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
               (rule "assignment_write_attribute_this" (formula "17"))
               (rule "sequentialToParallel2" (formula "17"))
               (rule "simplifyUpdate2" (formula "17"))
               (rule "simplifyUpdate3" (formula "17") (term "1,0"))
               (rule "applyOnElementary" (formula "17") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
               (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "methodCallEmpty" (formula "17") (term "1"))
               (rule "blockEmpty" (formula "17") (term "1"))
               (rule "assignment_write_attribute" (formula "17"))
               (branch "Normal Execution (i_5 != null)"
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                  (rule "dropEffectlessStores" (formula "17") (term "0,1,0"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,1,0"))
                  (rule "methodCallThrow" (formula "17") (term "1"))
                  (rule "tryCatchThrow" (formula "17") (term "1"))
                  (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_11"))
                  (rule "equality_comparison_simple" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
                  (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                  (rule "ifElseSplit" (formula "17"))
                  (branch "if x_11 true"
                     (rule "simplifyUpdate2" (formula "18"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_11 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "18"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "boolean_not_equal_2" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "ifElseSplit" (formula "17"))
                     (branch "if i_4 instanceof java.lang.Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "e_1"))
                        (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                        (branch "Normal Execution (i_4 instanceof java.lang.Throwable)"
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "assignment" (formula "17") (term "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "emptyModality" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17") (term "0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,1,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0"))
                           (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "17") (term "0,0"))
                           (rule "concrete_and_1" (formula "17") (term "0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,0,0,0"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0"))
                           (rule "instanceof_static_type" (formula "17") (term "0,1,0"))
                           (rule "boolean_equal" (formula "17") (term "1,0"))
                           (rule "concrete_and_3" (formula "17") (term "0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0,1"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,0,0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0,0"))
                           (rule "instanceof_static_type" (formula "17") (term "0,0,0,0"))
                           (rule "boolean_equal" (formula "17") (term "0,0,0"))
                           (rule "concrete_impl_1" (formula "17") (term "0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1,0,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "0,0,0,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "1,0,0,0,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,0,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,1,0,0,0,0,0,1"))
                           (rule "applyOnRigidTerm" (formula "17") (term "1,0,1,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,1,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,1,0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,0,0,0,0"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "17") (term "0,0,1,1,0,0,0,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "2,0,0,1,1,0,0,0,1"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0"))
                           (rule "pullOutSelect" (formula "17") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_textBoxRenderer_1"))
                           (rule "applyEq" (formula "18") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "18") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "18") (term "1,0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "17") (term "0,0,0,0") (ifseqformula "14"))
                           (rule "concrete_not_2" (formula "17") (term "0,0,0"))
                           (rule "concrete_impl_1" (formula "17") (term "0,0"))
                           (rule "pullOutSelect" (formula "17") (term "0,0,0") (inst "selectSK=TextBoxRenderer_showError_0"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "eqClose" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                           (rule "eqClose" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "0,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_true" (formula "1") (term "0"))
                           (rule "castDel" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "18") (term "0,0,0") (ifseqformula "1"))
                           (rule "boolean_equal" (formula "18") (term "0,0"))
                           (rule "concrete_and_1" (formula "18") (term "0"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "Class_invariant_axiom_for_NumericTextBox" (formula "11") (inst "j=j") (inst "i=i_8") (ifseqformula "6"))
                           (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                           (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                           (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                           (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
                           (rule "concrete_or_2" (formula "9"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                           (rule "times_zero_1" (formula "11") (term "0,0"))
                           (rule "add_zero_left" (formula "11") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (rule "concrete_or_1" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_NumericTextBox" (formula "19") (term "0") (inst "j=j") (inst "i=i_8") (ifseqformula "6"))
                           (rule "inInt" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "concrete_and_3" (formula "19") (term "0,0,0,1,1,0"))
                           (rule "inInt" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "concrete_and_3" (formula "19") (term "0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,0,0,1,1,0"))
                           (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,1,0,0,1,1,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0,0,1,1,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,1,1,0"))
                           (rule "pullOutSelect" (formula "19") (term "1,1,1,0,0,1,1,0") (inst "selectSK=NumericTextBox_EMPTY_1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "19") (term "0,0,0,1,0") (inst "selectSK=NumericTextBox_content_1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "19") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "19") (term "0,0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "13"))
                           (rule "concrete_not_2" (formula "19") (term "0,1,0"))
                           (rule "concrete_and_1" (formula "19") (term "1,0"))
                           (rule "inEqSimp_commuteGeq" (formula "19") (term "0,0,0"))
                           (rule "pullOutSelect" (formula "19") (term "0,1,0,0") (inst "selectSK=NumericTextBox_cursorPosition_1"))
                           (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "20") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "20") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "20") (term "1,1,1,0,0,0,0,0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "11"))
                           (rule "concrete_and_3" (formula "19") (term "0,0"))
                           (rule "inEqSimp_subsumption0" (formula "19") (term "0,0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                           (rule "qeq_literals" (formula "19") (term "0,0,0"))
                           (rule "concrete_or_1" (formula "19") (term "0,0"))
                           (rule "concrete_and_1" (formula "19") (term "0"))
                           (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0,0"))
                           (rule "commute_and" (formula "12") (term "0,1,0,0"))
                           (rule "andRight" (formula "19"))
                           (branch "Case 1"
                              (rule "allRight" (formula "19") (inst "sk=j_1"))
                              (rule "allRight" (formula "19") (inst "sk=i_8_0"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_leqRight" (formula "23"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "24") (term "0,1") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
                              (rule "times_zero_1" (formula "16") (term "0,0"))
                              (rule "add_zero_left" (formula "16") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                              (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                              (rule "mul_literals" (formula "3") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "cnf_rightDist" (formula "19") (term "0,0"))
                              (rule "distr_forallAnd" (formula "19") (term "0"))
                              (rule "distr_forallAnd" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "commute_and" (formula "27") (term "0"))
                              (rule "commute_or" (formula "20") (term "0,0"))
                              (rule "cnf_rightDist" (formula "19") (term "0,0"))
                              (rule "distr_forallAnd" (formula "19") (term "0"))
                              (rule "distr_forallAnd" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "21") (term "0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0"))
                              (rule "commute_or" (formula "20") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "20") (term "0,0,0,0,0"))
                              (rule "cut_direct" (formula "28") (term "0,0"))
                              (branch "CUT: self.content[i_8_0] >= 0 TRUE"
                                 (rule "concrete_and_1" (formula "29") (term "0"))
                                 (rule "cut_direct" (formula "29") (term "0"))
                                 (branch "CUT: self.content[i_8_0] <= 9 TRUE"
                                    (rule "concrete_and_1" (formula "30"))
                                    (opengoal " ")
                                 )
                                 (branch "CUT: self.content[i_8_0] <= 9 FALSE"
                                    (rule "concrete_and_2" (formula "30"))
                                    (rule "false_right" (formula "30"))
                                    (rule "inEqSimp_leqRight" (formula "29"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.content[i_8_0] >= 0 FALSE"
                                 (rule "concrete_and_2" (formula "29") (term "0"))
                                 (rule "concrete_and_2" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (opengoal " ")
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "19") (inst "sk=f_1"))
                              (rule "allRight" (formula "19") (inst "sk=o_1"))
                              (rule "orRight" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_1_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "22"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_2"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_3"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_4"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "1,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "commute_and" (formula "23"))
                              (rule "cnf_rightDist" (formula "16") (term "0,0"))
                              (rule "distr_forallAnd" (formula "16") (term "0"))
                              (rule "distr_forallAnd" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "commute_and" (formula "4") (term "0,0"))
                              (rule "commute_or" (formula "17") (term "0,0"))
                              (rule "commute_and" (formula "3") (term "0,0"))
                              (rule "commute_and" (formula "2") (term "0,0"))
                              (rule "commute_and" (formula "1") (term "0,0"))
                              (rule "cnf_rightDist" (formula "16") (term "0,0"))
                              (rule "distr_forallAnd" (formula "16") (term "0"))
                              (rule "distr_forallAnd" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "commute_or_2" (formula "17") (term "1,0,0,0,0"))
                              (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                              (rule "commute_or" (formula "17") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_1 = java.lang.Object::<created> & o_1 = i_7 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                 (rule "equalUnique" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "26") (term "2,0") (ifseqformula "1"))
                                 (rule "narrowSelectType" (formula "26") (term "0") (ifseqformula "7"))
                                 (rule "eqSymm" (formula "26"))
                                 (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_2" (formula "25") (term "0"))
                                 (rule "concrete_and_1" (formula "25"))
                                 (rule "notRight" (formula "25"))
                                 (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                              (branch "f_1 = java.lang.Object::<created> & o_1 = i_7 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "cut_direct" (formula "26") (term "0,0"))
                                 (branch "CUT: o_1 = null TRUE"
                                    (rule "concrete_not_1" (formula "27") (term "0"))
                                    (rule "concrete_and_2" (formula "27"))
                                    (rule "false_right" (formula "27"))
                                    (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "19") (term "1"))
                                    (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "22"))
                                    (rule "concrete_and_4" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "4") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "21"))
                                    (rule "concrete_and_4" (formula "4") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEqRigid" (formula "25") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "2") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "23") (term "1"))
                                    (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "20"))
                                    (rule "concrete_and_4" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "2") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "close" (formula "23") (ifseqformula "2"))
                                 )
                                 (branch "CUT: o_1 = null FALSE"
                                    (rule "concrete_not_2" (formula "27") (term "0"))
                                    (rule "concrete_and_1" (formula "27"))
                                    (rule "notRight" (formula "27"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_1 = java.lang.Throwable::$cause & o_1 = i_7 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "19"))
                                       (rule "false_right" (formula "19"))
                                       (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEqRigid" (formula "24") (term "0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "24") (term "0"))
                                       (rule "concrete_and_2" (formula "24"))
                                       (rule "false_right" (formula "24"))
                                       (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "19") (ifseqformula "1"))
                                    )
                                    (branch "f_1 = java.lang.Throwable::$cause & o_1 = i_7 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_1 = java.lang.Throwable::$message & o_1 = i_7 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "4") (term "0,0"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "19"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "20"))
                                          (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "4") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "4") (term "0"))
                                          (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "applyEqRigid" (formula "26") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "26") (term "0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "25") (term "0"))
                                          (rule "concrete_and_2" (formula "25"))
                                          (rule "false_right" (formula "25"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "20") (ifseqformula "1"))
                                       )
                                       (branch "f_1 = java.lang.Throwable::$message & o_1 = i_7 FALSE"
                                          (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "ifthenelse_split" (formula "2") (term "0"))
                                          (branch "f_1 = java.lang.Object::<initialized> & o_1 = i_7 TRUE"
                                             (rule "andLeft" (formula "2"))
                                             (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "19"))
                                             (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "20"))
                                             (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                                             (rule "concrete_and_3" (formula "18"))
                                             (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "25") (term "0"))
                                             (rule "concrete_and_2" (formula "25"))
                                             (rule "false_right" (formula "25"))
                                             (rule "applyEqRigid" (formula "26") (term "2,0") (ifseqformula "2"))
                                             (rule "narrowSelectType" (formula "26") (term "0") (ifseqformula "7"))
                                             (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "2"))
                                             (rule "equalUnique" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                             (rule "close" (formula "19") (ifseqformula "1"))
                                          )
                                          (branch "f_1 = java.lang.Object::<initialized> & o_1 = i_7 FALSE"
                                             (rule "close" (formula "29") (ifseqformula "2"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "ClassCastException (!(i_4 instanceof java.lang.Throwable))"
                           (rule "instanceof_static_type" (formula "17") (term "0,1,1"))
                           (rule "boolean_equal" (formula "17") (term "1,1"))
                           (rule "concrete_or_3" (formula "17") (term "1"))
                           (rule "closeTrue" (formula "17"))
                        )
                     )
                     (branch "if i_4 instanceof java.lang.Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                        (rule "double_not" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "close" (formula "14") (ifseqformula "1"))
                     )
                  )
               )
               (branch "Null Reference (i_5 = null)"
                  (rule "false_right" (formula "18"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "14") (ifseqformula "1"))
               )
            )
            (branch "Null Reference (t_1 = null)"
               (rule "false_right" (formula "14"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "close" (formula "11") (ifseqformula "1"))
            )
         )
         (branch "if x_9 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "13"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "applyOnPV" (formula "10") (term "0"))
            (rule "simplifyUpdate1" (formula "10") (term "1"))
            (rule "ifthenelse_concrete4" (formula "10"))
            (rule "boolean_not_equal_2" (formula "10") (term "1"))
            (rule "concrete_or_4" (formula "10"))
            (rule "notRight" (formula "10"))
            (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=i"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i"))
            (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_1"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "3"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_2"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_2"))
            (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
            (rule "simplifyUpdate2" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "__NEW__"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_3"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_3"))
            (rule "allocateInstance" (formula "13"))
            (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
            (rule "concrete_impl_1" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "methodCallWithinClass" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "16") (term "1"))
            (rule "methodCallReturn" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnPV" (formula "16") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment" (formula "16") (term "1"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnPV" (formula "16") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallSuper" (formula "16") (term "1"))
            (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
            (rule "assignment_write_attribute_this" (formula "16"))
            (rule "sequentialToParallel2" (formula "16"))
            (rule "simplifyUpdate2" (formula "16"))
            (rule "simplifyUpdate3" (formula "16") (term "1,0"))
            (rule "applyOnElementary" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "assignment_write_attribute" (formula "16"))
            (branch "Normal Execution (i_1 != null)"
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
               (rule "dropEffectlessStores" (formula "16") (term "0,1,0"))
               (rule "assignment" (formula "16") (term "1"))
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnPV" (formula "16") (term "0,1,0"))
               (rule "methodCallThrow" (formula "16") (term "1"))
               (rule "tryCatchThrow" (formula "16") (term "1"))
               (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
               (rule "equality_comparison_simple" (formula "16") (term "1"))
               (rule "sequentialToParallel2" (formula "16"))
               (rule "simplifyUpdate3" (formula "16") (term "1,0"))
               (rule "applyOnElementary" (formula "16") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
               (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
               (rule "replace_known_right" (formula "16") (term "0,0,1,0") (ifseqformula "13"))
               (rule "ifthenelse_false" (formula "16") (term "0,1,0"))
               (rule "ifElseSplit" (formula "16"))
               (branch "if x_10 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_10 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "applyOnPV" (formula "12") (term "0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "boolean_not_equal_2" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "ifElseSplit" (formula "16"))
                  (branch "if i instanceof java.lang.Throwable true"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "16") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "16") (term "1"))
                     (branch "Normal Execution (i instanceof java.lang.Throwable)"
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                        (rule "applyOnElementary" (formula "16") (term "1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0"))
                        (rule "assignment" (formula "16") (term "1"))
                        (rule "sequentialToParallel2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                        (rule "applyOnElementary" (formula "16") (term "1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0"))
                        (rule "emptyModality" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,1,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
                        (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "16") (term "0,0"))
                        (rule "concrete_and_1" (formula "16") (term "0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
                        (rule "instanceof_static_type" (formula "16") (term "0,1,0"))
                        (rule "boolean_equal" (formula "16") (term "1,0"))
                        (rule "concrete_and_3" (formula "16") (term "0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,0,0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0,1"))
                        (rule "eqSymm" (formula "16") (term "1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "0,1,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,1,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "0,0,0,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0,0"))
                        (rule "instanceof_static_type" (formula "16") (term "0,0,0,0"))
                        (rule "boolean_equal" (formula "16") (term "0,0,0"))
                        (rule "concrete_impl_1" (formula "16") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,0,1,1,0,0,0,1"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,0,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0,0"))
                        (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "16") (term "1,0,1,0,0"))
                        (rule "applyEq" (formula "16") (term "1,0,0,0,0,0,1") (ifseqformula "2"))
                        (rule "pullOutSelect" (formula "16") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_textBoxRenderer_0"))
                        (rule "applyEq" (formula "17") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "17") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "16") (term "0,0,0"))
                        (rule "concrete_impl_2" (formula "16") (term "0,0"))
                        (rule "concrete_and_1" (formula "16") (term "0"))
                        (rule "Class_invariant_axiom_for_NumericTextBox" (formula "11") (inst "j=j") (inst "i=i_4") (ifseqformula "6"))
                        (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                        (rule "inInt" (formula "11") (term "1,0,0,0,1,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,0,0,1,1"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "11"))
                        (rule "notLeft" (formula "12"))
                        (rule "andLeft" (formula "11"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
                        (rule "concrete_or_2" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0"))
                        (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                        (rule "times_zero_1" (formula "11") (term "0,0"))
                        (rule "add_zero_left" (formula "11") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                        (rule "mul_literals" (formula "11") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "nnf_imp2or" (formula "12") (term "0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                        (rule "Class_invariant_axiom_for_NumericTextBox" (formula "18") (term "0") (inst "j=j") (inst "i=i_4") (ifseqformula "6"))
                        (rule "inInt" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "concrete_and_3" (formula "18") (term "0,0,0,1,1,0"))
                        (rule "inInt" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "concrete_and_3" (formula "18") (term "0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,0,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "1,0,0,0,1,0,0,1,1,0"))
                        (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1,0,0,1,1,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "pullOutSelect" (formula "18") (term "0,1,1,0,0") (inst "selectSK=NumericTextBox_cursorPosition_0"))
                        (rule "applyEq" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "18") (term "1,1,0,0") (ifseqformula "11"))
                        (rule "concrete_and_3" (formula "18") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "18") (term "0,0,0,1,0") (inst "selectSK=NumericTextBox_content_0"))
                        (rule "applyEq" (formula "19") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "19") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,1,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "19") (term "1,0,0,0,1,0,0,1,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "18") (term "0,0,0,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "18") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "18") (term "0,0"))
                        (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "18") (term "0,1,0"))
                        (rule "concrete_and_1" (formula "18") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "0,0"))
                        (rule "inEqSimp_subsumption0" (formula "18") (term "0,0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "18") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "18") (term "0,0"))
                        (rule "concrete_and_1" (formula "18") (term "0"))
                        (rule "pullOutSelect" (formula "18") (term "1,1,1,0,0,0") (inst "selectSK=NumericTextBox_EMPTY_0"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "1,1,1,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,0"))
                        (rule "commute_and" (formula "12") (term "0,1,0,0"))
                        (rule "andRight" (formula "18"))
                        (branch "Case 1"
                           (rule "allRight" (formula "18") (inst "sk=j_0"))
                           (rule "allRight" (formula "18") (inst "sk=i_4_0"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "inEqSimp_geqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "22"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "23") (term "0,1") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "24") (term "0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=arr_1"))
                           (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
                           (rule "times_zero_1" (formula "16") (term "0,0"))
                           (rule "add_zero_left" (formula "16") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "cnf_rightDist" (formula "19") (term "0,0"))
                           (rule "distr_forallAnd" (formula "19") (term "0"))
                           (rule "distr_forallAnd" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "commute_and" (formula "26") (term "0"))
                           (rule "commute_or" (formula "20") (term "0,0"))
                           (rule "cnf_rightDist" (formula "19") (term "0,0"))
                           (rule "distr_forallAnd" (formula "19") (term "0"))
                           (rule "distr_forallAnd" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "commute_or_2" (formula "19") (term "0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "21") (term "0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0,0"))
                           (rule "commute_or_2" (formula "19") (term "0,0"))
                           (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
                           (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                           (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "20") (term "0,0,0"))
                           (rule "commute_or_2" (formula "20") (term "0,0"))
                           (rule "cut_direct" (formula "27") (term "0,0"))
                           (branch "CUT: self.content[i_4_0] >= 0 TRUE"
                              (rule "concrete_and_1" (formula "28") (term "0"))
                              (rule "cut_direct" (formula "28") (term "0"))
                              (branch "CUT: self.content[i_4_0] <= 9 TRUE"
                                 (rule "concrete_and_1" (formula "29"))
                                 (opengoal " ")
                              )
                              (branch "CUT: self.content[i_4_0] <= 9 FALSE"
                                 (rule "concrete_and_2" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                 (rule "concrete_or_1" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (opengoal " ")
                              )
                           )
                           (branch "CUT: self.content[i_4_0] >= 0 FALSE"
                              (rule "concrete_and_2" (formula "28") (term "0"))
                              (rule "concrete_and_2" (formula "28"))
                              (rule "false_right" (formula "28"))
                              (rule "inEqSimp_geqRight" (formula "27"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (opengoal " ")
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "18") (inst "sk=f_0"))
                           (rule "allRight" (formula "18") (inst "sk=o_0"))
                           (rule "orRight" (formula "18"))
                           (rule "orRight" (formula "18"))
                           (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=f_0_0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "21"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "eqSymm" (formula "1") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "19"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "commute_and" (formula "22"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0"))
                           (rule "distr_forallAnd" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or" (formula "17") (term "0,0"))
                           (rule "commute_and" (formula "4") (term "0,0"))
                           (rule "commute_and" (formula "3") (term "0,0"))
                           (rule "commute_and" (formula "2") (term "0,0"))
                           (rule "commute_and" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0"))
                           (rule "distr_forallAnd" (formula "16") (term "0"))
                           (rule "distr_forallAnd" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "commute_or_2" (formula "16") (term "0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "18") (term "0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0"))
                           (rule "commute_or" (formula "17") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = java.lang.Object::<created> & o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                              (rule "equalUnique" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                              (rule "equalUnique" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "ifthenelse_same_branches" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "22") (term "0,0") (ifseqformula "1"))
                              (rule "equalUnique" (formula "22") (term "0"))
                              (rule "concrete_and_2" (formula "22"))
                              (rule "false_right" (formula "22"))
                              (rule "applyEq" (formula "22") (term "1,0,0,1") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "22") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "22") (term "1"))
                              (rule "concrete_and_3" (formula "22"))
                              (rule "notRight" (formula "22"))
                              (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "23") (term "0") (ifseqformula "7"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "close" (formula "20") (ifseqformula "3"))
                           )
                           (branch "f_0 = java.lang.Object::<created> & o_0 = i_3 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "cut_direct" (formula "25") (term "0,0"))
                              (branch "CUT: o_0 = null TRUE"
                                 (rule "concrete_not_1" (formula "26") (term "0"))
                                 (rule "concrete_and_2" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "1"))
                                 (rule "concrete_and_3" (formula "25"))
                                 (rule "applyEqRigid" (formula "19") (term "0,1") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "19") (term "1"))
                                 (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "22"))
                                 (rule "concrete_and_4" (formula "19"))
                                 (rule "false_right" (formula "19"))
                                 (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "4") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "21"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "2") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "2") (term "1,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "close" (formula "23") (ifseqformula "2"))
                              )
                              (branch "CUT: o_0 = null FALSE"
                                 (rule "concrete_not_2" (formula "26") (term "0"))
                                 (rule "concrete_and_1" (formula "26"))
                                 (rule "notRight" (formula "26"))
                                 (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "26"))
                                 (rule "concrete_and_4" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "f_0 = java.lang.Throwable::$cause & o_0 = i_3 TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                    (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                    (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "19"))
                                    (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                    (rule "equalUnique" (formula "4") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                    (rule "equalUnique" (formula "18"))
                                    (rule "false_right" (formula "18"))
                                    (rule "applyEq" (formula "24") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "close" (formula "19") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = java.lang.Throwable::$cause & o_0 = i_3 FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_0 = java.lang.Throwable::$message & o_0 = i_3 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "20"))
                                       (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "19"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "20"))
                                       (rule "false_right" (formula "20"))
                                       (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEqRigid" (formula "25") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "20") (ifseqformula "1"))
                                    )
                                    (branch "f_0 = java.lang.Throwable::$message & o_0 = i_3 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_0 = java.lang.Object::<initialized> & o_0 = i_3 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "20"))
                                          (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "18"))
                                          (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                                          (rule "concrete_and_3" (formula "19"))
                                          (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "18"))
                                          (rule "false_right" (formula "18"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                                          (rule "equalUnique" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
                                          (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "20") (ifseqformula "1"))
                                       )
                                       (branch "f_0 = java.lang.Object::<initialized> & o_0 = i_3 FALSE"
                                          (rule "close" (formula "27") (ifseqformula "2"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "ClassCastException (!(i instanceof java.lang.Throwable))"
                        (rule "instanceof_static_type" (formula "16") (term "0,1,1"))
                        (rule "boolean_equal" (formula "16") (term "1,1"))
                        (rule "concrete_or_3" (formula "16") (term "1"))
                        (rule "closeTrue" (formula "16"))
                     )
                  )
                  (branch "if i instanceof java.lang.Throwable false"
                     (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                     (rule "concrete_or_4" (formula "1") (term "0,1"))
                     (rule "double_not" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "close" (formula "14") (ifseqformula "1"))
                  )
               )
            )
            (branch "Null Reference (i_1 = null)"
               (rule "false_right" (formula "17"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "14") (ifseqformula "1"))
            )
         )
      )
      (branch "if x false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "10"))
         (rule "applyOnPV" (formula "10") (term "0"))
         (rule "simplifyUpdate1" (formula "10") (term "1"))
         (rule "boolean_equal" (formula "10"))
         (rule "closeTrue" (formula "10"))
      )
   )
)
)

}
